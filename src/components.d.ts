/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DiGAAppointmentDetails, DiGADiaryEntryDetails, DiGAEntryDetails, DiGAEntrySummaryCategory, DiGAEnvironmentalFactorDetails, DiGAGoalDetails, DiGANutritionDetails, DiGAObservationDetails, DiGAPatientDetails, DiGAQuestionnaireDetails, DiGAVitalSignDetails } from "./utils/recordData";
import { FilterStates } from "./utils/recordFilters";
import { DiGADetails } from "./utils/digaData";
export { DiGAAppointmentDetails, DiGADiaryEntryDetails, DiGAEntryDetails, DiGAEntrySummaryCategory, DiGAEnvironmentalFactorDetails, DiGAGoalDetails, DiGANutritionDetails, DiGAObservationDetails, DiGAPatientDetails, DiGAQuestionnaireDetails, DiGAVitalSignDetails } from "./utils/recordData";
export { FilterStates } from "./utils/recordFilters";
export { DiGADetails } from "./utils/digaData";
export namespace Components {
    interface MioViewerDiga {
        "base64FhirData": string;
    }
    interface MioViewerDigaDetail {
        /**
          * Beschreibt die Attribute des ausgewählten Eintrags
         */
        "entryDetails": DiGAEntryDetails;
        /**
          * Beschreibt den Namen des ausgewählten Eintrags
         */
        "entryName": string;
    }
    interface MioViewerDigaDetailAppointment {
        /**
          * Beschreibt einen Termin orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Appointment
         */
        "appointmentDetails": DiGAAppointmentDetails;
    }
    interface MioViewerDigaDetailDiaryentry {
        /**
          * Beschreibt einen Tagebucheintrag orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Diary_Entry
         */
        "diaryEntryDetails": DiGADiaryEntryDetails;
    }
    interface MioViewerDigaDetailEnvironmentalfactor {
        /**
          * Beschreibt einen Umweltfaktor orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Environmental_Factor
         */
        "environmentalFactorDetails": DiGAEnvironmentalFactorDetails;
    }
    interface MioViewerDigaDetailGoal {
        /**
          * Beschreibt ein Ziel orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Goal
         */
        "goalDetails": DiGAGoalDetails;
    }
    interface MioViewerDigaDetailNutrition {
        /**
          * Beschreibt eine Nahrungsmittelaufnahme orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Nutrition_Intake und https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Nutrition_Intake_Food_Composition_Types
         */
        "nutritionDetails": DiGANutritionDetails;
    }
    interface MioViewerDigaDetailObservation {
        /**
          * Beschreibt ein freies Ergebnis oder einen freien Befund orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Free
         */
        "observationDetails": DiGAObservationDetails;
    }
    interface MioViewerDigaDetailQuestionaire {
        /**
          * Beschreibt einen Fragebogen orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Questionnaire und https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_QuestionnaireResponse
         */
        "questionnaireDetails": DiGAQuestionnaireDetails;
    }
    interface MioViewerDigaDetailVitalsign {
        /**
          * Beschreibt ein Vitalzeichen orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Blood_Pressure und https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Heart_Rate
         */
        "vitalSignDetails": DiGAVitalSignDetails;
    }
    interface MioViewerDigaFilterMenu {
        /**
          * Beschreibt alle Kategorien die innerhalb des Bundles verwendet werden
         */
        "filterCategories": string[];
    }
    interface MioViewerDigaHeader {
        /**
          * Beschreibt einen Patienten orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Patient
         */
        "patient": DiGAPatientDetails;
    }
    interface MioViewerDigaListSortIndicator {
        /**
          * Beschreibt ob der Sortier-Zustand einer Liste aktiv ist
         */
        "active": boolean;
        /**
          * Beschreibt ob der Sortier-Zustand einer Liste rückwärts sortiert ist
         */
        "reversed": boolean;
    }
    interface MioViewerDigaNotice {
    }
    interface MioViewerDigaRecordOverview {
        /**
          * Beschreibt eine Liste der gesamten Einträgen nach Kategorien sortiert
         */
        "recordSummaryCategories": DiGAEntrySummaryCategory[];
        /**
          * Beschreibt den vom Nutzer ausgewählten Eintrag innerhalb der Liste
         */
        "selectedEntry": string;
    }
    interface MioViewerDigaRecordOverviewSection {
        /**
          * Beschreibt eine Liste der gesamten Einträgen nach Kategorien sortiert
         */
        "recordSummaryCategory": DiGAEntrySummaryCategory;
        /**
          * Beschreibt den vom Nutzer ausgewählten Eintrag innerhalb der Liste
         */
        "selectedEntry": string;
    }
    interface MioViewerDigaSubheader {
        /**
          * Beschreibt eine DiGA orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Device_DIGA
         */
        "diga": DiGADetails;
    }
}
export interface MioViewerDigaDetailCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMioViewerDigaDetailElement;
}
export interface MioViewerDigaFilterMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMioViewerDigaFilterMenuElement;
}
export interface MioViewerDigaNoticeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMioViewerDigaNoticeElement;
}
export interface MioViewerDigaRecordOverviewSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMioViewerDigaRecordOverviewSectionElement;
}
export interface MioViewerDigaSubheaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMioViewerDigaSubheaderElement;
}
declare global {
    interface HTMLMioViewerDigaElement extends Components.MioViewerDiga, HTMLStencilElement {
    }
    var HTMLMioViewerDigaElement: {
        prototype: HTMLMioViewerDigaElement;
        new (): HTMLMioViewerDigaElement;
    };
    interface HTMLMioViewerDigaDetailElementEventMap {
        "detailsHidden": any;
    }
    interface HTMLMioViewerDigaDetailElement extends Components.MioViewerDigaDetail, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMioViewerDigaDetailElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaDetailElement, ev: MioViewerDigaDetailCustomEvent<HTMLMioViewerDigaDetailElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMioViewerDigaDetailElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaDetailElement, ev: MioViewerDigaDetailCustomEvent<HTMLMioViewerDigaDetailElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMioViewerDigaDetailElement: {
        prototype: HTMLMioViewerDigaDetailElement;
        new (): HTMLMioViewerDigaDetailElement;
    };
    interface HTMLMioViewerDigaDetailAppointmentElement extends Components.MioViewerDigaDetailAppointment, HTMLStencilElement {
    }
    var HTMLMioViewerDigaDetailAppointmentElement: {
        prototype: HTMLMioViewerDigaDetailAppointmentElement;
        new (): HTMLMioViewerDigaDetailAppointmentElement;
    };
    interface HTMLMioViewerDigaDetailDiaryentryElement extends Components.MioViewerDigaDetailDiaryentry, HTMLStencilElement {
    }
    var HTMLMioViewerDigaDetailDiaryentryElement: {
        prototype: HTMLMioViewerDigaDetailDiaryentryElement;
        new (): HTMLMioViewerDigaDetailDiaryentryElement;
    };
    interface HTMLMioViewerDigaDetailEnvironmentalfactorElement extends Components.MioViewerDigaDetailEnvironmentalfactor, HTMLStencilElement {
    }
    var HTMLMioViewerDigaDetailEnvironmentalfactorElement: {
        prototype: HTMLMioViewerDigaDetailEnvironmentalfactorElement;
        new (): HTMLMioViewerDigaDetailEnvironmentalfactorElement;
    };
    interface HTMLMioViewerDigaDetailGoalElement extends Components.MioViewerDigaDetailGoal, HTMLStencilElement {
    }
    var HTMLMioViewerDigaDetailGoalElement: {
        prototype: HTMLMioViewerDigaDetailGoalElement;
        new (): HTMLMioViewerDigaDetailGoalElement;
    };
    interface HTMLMioViewerDigaDetailNutritionElement extends Components.MioViewerDigaDetailNutrition, HTMLStencilElement {
    }
    var HTMLMioViewerDigaDetailNutritionElement: {
        prototype: HTMLMioViewerDigaDetailNutritionElement;
        new (): HTMLMioViewerDigaDetailNutritionElement;
    };
    interface HTMLMioViewerDigaDetailObservationElement extends Components.MioViewerDigaDetailObservation, HTMLStencilElement {
    }
    var HTMLMioViewerDigaDetailObservationElement: {
        prototype: HTMLMioViewerDigaDetailObservationElement;
        new (): HTMLMioViewerDigaDetailObservationElement;
    };
    interface HTMLMioViewerDigaDetailQuestionaireElement extends Components.MioViewerDigaDetailQuestionaire, HTMLStencilElement {
    }
    var HTMLMioViewerDigaDetailQuestionaireElement: {
        prototype: HTMLMioViewerDigaDetailQuestionaireElement;
        new (): HTMLMioViewerDigaDetailQuestionaireElement;
    };
    interface HTMLMioViewerDigaDetailVitalsignElement extends Components.MioViewerDigaDetailVitalsign, HTMLStencilElement {
    }
    var HTMLMioViewerDigaDetailVitalsignElement: {
        prototype: HTMLMioViewerDigaDetailVitalsignElement;
        new (): HTMLMioViewerDigaDetailVitalsignElement;
    };
    interface HTMLMioViewerDigaFilterMenuElementEventMap {
        "filtersApplied": FilterStates;
    }
    interface HTMLMioViewerDigaFilterMenuElement extends Components.MioViewerDigaFilterMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMioViewerDigaFilterMenuElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaFilterMenuElement, ev: MioViewerDigaFilterMenuCustomEvent<HTMLMioViewerDigaFilterMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMioViewerDigaFilterMenuElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaFilterMenuElement, ev: MioViewerDigaFilterMenuCustomEvent<HTMLMioViewerDigaFilterMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMioViewerDigaFilterMenuElement: {
        prototype: HTMLMioViewerDigaFilterMenuElement;
        new (): HTMLMioViewerDigaFilterMenuElement;
    };
    interface HTMLMioViewerDigaHeaderElement extends Components.MioViewerDigaHeader, HTMLStencilElement {
    }
    var HTMLMioViewerDigaHeaderElement: {
        prototype: HTMLMioViewerDigaHeaderElement;
        new (): HTMLMioViewerDigaHeaderElement;
    };
    interface HTMLMioViewerDigaListSortIndicatorElement extends Components.MioViewerDigaListSortIndicator, HTMLStencilElement {
    }
    var HTMLMioViewerDigaListSortIndicatorElement: {
        prototype: HTMLMioViewerDigaListSortIndicatorElement;
        new (): HTMLMioViewerDigaListSortIndicatorElement;
    };
    interface HTMLMioViewerDigaNoticeElementEventMap {
        "noticeClose": any;
    }
    interface HTMLMioViewerDigaNoticeElement extends Components.MioViewerDigaNotice, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMioViewerDigaNoticeElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaNoticeElement, ev: MioViewerDigaNoticeCustomEvent<HTMLMioViewerDigaNoticeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMioViewerDigaNoticeElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaNoticeElement, ev: MioViewerDigaNoticeCustomEvent<HTMLMioViewerDigaNoticeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMioViewerDigaNoticeElement: {
        prototype: HTMLMioViewerDigaNoticeElement;
        new (): HTMLMioViewerDigaNoticeElement;
    };
    interface HTMLMioViewerDigaRecordOverviewElement extends Components.MioViewerDigaRecordOverview, HTMLStencilElement {
    }
    var HTMLMioViewerDigaRecordOverviewElement: {
        prototype: HTMLMioViewerDigaRecordOverviewElement;
        new (): HTMLMioViewerDigaRecordOverviewElement;
    };
    interface HTMLMioViewerDigaRecordOverviewSectionElementEventMap {
        "entrySelected": string;
    }
    interface HTMLMioViewerDigaRecordOverviewSectionElement extends Components.MioViewerDigaRecordOverviewSection, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMioViewerDigaRecordOverviewSectionElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaRecordOverviewSectionElement, ev: MioViewerDigaRecordOverviewSectionCustomEvent<HTMLMioViewerDigaRecordOverviewSectionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMioViewerDigaRecordOverviewSectionElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaRecordOverviewSectionElement, ev: MioViewerDigaRecordOverviewSectionCustomEvent<HTMLMioViewerDigaRecordOverviewSectionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMioViewerDigaRecordOverviewSectionElement: {
        prototype: HTMLMioViewerDigaRecordOverviewSectionElement;
        new (): HTMLMioViewerDigaRecordOverviewSectionElement;
    };
    interface HTMLMioViewerDigaSubheaderElementEventMap {
        "noticeOpen": any;
    }
    interface HTMLMioViewerDigaSubheaderElement extends Components.MioViewerDigaSubheader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMioViewerDigaSubheaderElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaSubheaderElement, ev: MioViewerDigaSubheaderCustomEvent<HTMLMioViewerDigaSubheaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMioViewerDigaSubheaderElementEventMap>(type: K, listener: (this: HTMLMioViewerDigaSubheaderElement, ev: MioViewerDigaSubheaderCustomEvent<HTMLMioViewerDigaSubheaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMioViewerDigaSubheaderElement: {
        prototype: HTMLMioViewerDigaSubheaderElement;
        new (): HTMLMioViewerDigaSubheaderElement;
    };
    interface HTMLElementTagNameMap {
        "mio-viewer-diga": HTMLMioViewerDigaElement;
        "mio-viewer-diga-detail": HTMLMioViewerDigaDetailElement;
        "mio-viewer-diga-detail-appointment": HTMLMioViewerDigaDetailAppointmentElement;
        "mio-viewer-diga-detail-diaryentry": HTMLMioViewerDigaDetailDiaryentryElement;
        "mio-viewer-diga-detail-environmentalfactor": HTMLMioViewerDigaDetailEnvironmentalfactorElement;
        "mio-viewer-diga-detail-goal": HTMLMioViewerDigaDetailGoalElement;
        "mio-viewer-diga-detail-nutrition": HTMLMioViewerDigaDetailNutritionElement;
        "mio-viewer-diga-detail-observation": HTMLMioViewerDigaDetailObservationElement;
        "mio-viewer-diga-detail-questionaire": HTMLMioViewerDigaDetailQuestionaireElement;
        "mio-viewer-diga-detail-vitalsign": HTMLMioViewerDigaDetailVitalsignElement;
        "mio-viewer-diga-filter-menu": HTMLMioViewerDigaFilterMenuElement;
        "mio-viewer-diga-header": HTMLMioViewerDigaHeaderElement;
        "mio-viewer-diga-list-sort-indicator": HTMLMioViewerDigaListSortIndicatorElement;
        "mio-viewer-diga-notice": HTMLMioViewerDigaNoticeElement;
        "mio-viewer-diga-record-overview": HTMLMioViewerDigaRecordOverviewElement;
        "mio-viewer-diga-record-overview-section": HTMLMioViewerDigaRecordOverviewSectionElement;
        "mio-viewer-diga-subheader": HTMLMioViewerDigaSubheaderElement;
    }
}
declare namespace LocalJSX {
    interface MioViewerDiga {
        "base64FhirData": string;
    }
    interface MioViewerDigaDetail {
        /**
          * Beschreibt die Attribute des ausgewählten Eintrags
         */
        "entryDetails": DiGAEntryDetails;
        /**
          * Beschreibt den Namen des ausgewählten Eintrags
         */
        "entryName"?: string;
        /**
          * Event wird ausgelöst, wenn die Detail-Ansischt geschlossen wird
         */
        "onDetailsHidden"?: (event: MioViewerDigaDetailCustomEvent<any>) => void;
    }
    interface MioViewerDigaDetailAppointment {
        /**
          * Beschreibt einen Termin orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Appointment
         */
        "appointmentDetails": DiGAAppointmentDetails;
    }
    interface MioViewerDigaDetailDiaryentry {
        /**
          * Beschreibt einen Tagebucheintrag orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Diary_Entry
         */
        "diaryEntryDetails": DiGADiaryEntryDetails;
    }
    interface MioViewerDigaDetailEnvironmentalfactor {
        /**
          * Beschreibt einen Umweltfaktor orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Environmental_Factor
         */
        "environmentalFactorDetails": DiGAEnvironmentalFactorDetails;
    }
    interface MioViewerDigaDetailGoal {
        /**
          * Beschreibt ein Ziel orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Goal
         */
        "goalDetails": DiGAGoalDetails;
    }
    interface MioViewerDigaDetailNutrition {
        /**
          * Beschreibt eine Nahrungsmittelaufnahme orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Nutrition_Intake und https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Nutrition_Intake_Food_Composition_Types
         */
        "nutritionDetails": DiGANutritionDetails;
    }
    interface MioViewerDigaDetailObservation {
        /**
          * Beschreibt ein freies Ergebnis oder einen freien Befund orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Free
         */
        "observationDetails": DiGAObservationDetails;
    }
    interface MioViewerDigaDetailQuestionaire {
        /**
          * Beschreibt einen Fragebogen orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Questionnaire und https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_QuestionnaireResponse
         */
        "questionnaireDetails": DiGAQuestionnaireDetails;
    }
    interface MioViewerDigaDetailVitalsign {
        /**
          * Beschreibt ein Vitalzeichen orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Blood_Pressure und https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Observation_Heart_Rate
         */
        "vitalSignDetails": DiGAVitalSignDetails;
    }
    interface MioViewerDigaFilterMenu {
        /**
          * Beschreibt alle Kategorien die innerhalb des Bundles verwendet werden
         */
        "filterCategories"?: string[];
        /**
          * Event wird ausgelöst wenn ein Filter-Button geklickt wird, dabei werden die ausgewählten Filter in FilterStates übergeben
         */
        "onFiltersApplied"?: (event: MioViewerDigaFilterMenuCustomEvent<FilterStates>) => void;
    }
    interface MioViewerDigaHeader {
        /**
          * Beschreibt einen Patienten orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Patient
         */
        "patient": DiGAPatientDetails;
    }
    interface MioViewerDigaListSortIndicator {
        /**
          * Beschreibt ob der Sortier-Zustand einer Liste aktiv ist
         */
        "active"?: boolean;
        /**
          * Beschreibt ob der Sortier-Zustand einer Liste rückwärts sortiert ist
         */
        "reversed"?: boolean;
    }
    interface MioViewerDigaNotice {
        /**
          * Emitted when user closes the modal.  A parent component should listen to this event and close the popup.
         */
        "onNoticeClose"?: (event: MioViewerDigaNoticeCustomEvent<any>) => void;
    }
    interface MioViewerDigaRecordOverview {
        /**
          * Beschreibt eine Liste der gesamten Einträgen nach Kategorien sortiert
         */
        "recordSummaryCategories"?: DiGAEntrySummaryCategory[];
        /**
          * Beschreibt den vom Nutzer ausgewählten Eintrag innerhalb der Liste
         */
        "selectedEntry"?: string;
    }
    interface MioViewerDigaRecordOverviewSection {
        /**
          * Event wird ausgelöst sobald der Nutzer einen Eintrag auswählt dabei wird id des ausgewählten Eintrags übertragen
         */
        "onEntrySelected"?: (event: MioViewerDigaRecordOverviewSectionCustomEvent<string>) => void;
        /**
          * Beschreibt eine Liste der gesamten Einträgen nach Kategorien sortiert
         */
        "recordSummaryCategory"?: DiGAEntrySummaryCategory;
        /**
          * Beschreibt den vom Nutzer ausgewählten Eintrag innerhalb der Liste
         */
        "selectedEntry"?: string;
    }
    interface MioViewerDigaSubheader {
        /**
          * Beschreibt eine DiGA orientiert an https://fhir.kbv.de/StructureDefinition/KBV_PR_MIO_DIGA_Device_DIGA
         */
        "diga"?: DiGADetails;
        /**
          * Event wird ausgelöst, wenn der Nutzer den Hinweis anklickt
         */
        "onNoticeOpen"?: (event: MioViewerDigaSubheaderCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "mio-viewer-diga": MioViewerDiga;
        "mio-viewer-diga-detail": MioViewerDigaDetail;
        "mio-viewer-diga-detail-appointment": MioViewerDigaDetailAppointment;
        "mio-viewer-diga-detail-diaryentry": MioViewerDigaDetailDiaryentry;
        "mio-viewer-diga-detail-environmentalfactor": MioViewerDigaDetailEnvironmentalfactor;
        "mio-viewer-diga-detail-goal": MioViewerDigaDetailGoal;
        "mio-viewer-diga-detail-nutrition": MioViewerDigaDetailNutrition;
        "mio-viewer-diga-detail-observation": MioViewerDigaDetailObservation;
        "mio-viewer-diga-detail-questionaire": MioViewerDigaDetailQuestionaire;
        "mio-viewer-diga-detail-vitalsign": MioViewerDigaDetailVitalsign;
        "mio-viewer-diga-filter-menu": MioViewerDigaFilterMenu;
        "mio-viewer-diga-header": MioViewerDigaHeader;
        "mio-viewer-diga-list-sort-indicator": MioViewerDigaListSortIndicator;
        "mio-viewer-diga-notice": MioViewerDigaNotice;
        "mio-viewer-diga-record-overview": MioViewerDigaRecordOverview;
        "mio-viewer-diga-record-overview-section": MioViewerDigaRecordOverviewSection;
        "mio-viewer-diga-subheader": MioViewerDigaSubheader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "mio-viewer-diga": LocalJSX.MioViewerDiga & JSXBase.HTMLAttributes<HTMLMioViewerDigaElement>;
            "mio-viewer-diga-detail": LocalJSX.MioViewerDigaDetail & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailElement>;
            "mio-viewer-diga-detail-appointment": LocalJSX.MioViewerDigaDetailAppointment & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailAppointmentElement>;
            "mio-viewer-diga-detail-diaryentry": LocalJSX.MioViewerDigaDetailDiaryentry & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailDiaryentryElement>;
            "mio-viewer-diga-detail-environmentalfactor": LocalJSX.MioViewerDigaDetailEnvironmentalfactor & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailEnvironmentalfactorElement>;
            "mio-viewer-diga-detail-goal": LocalJSX.MioViewerDigaDetailGoal & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailGoalElement>;
            "mio-viewer-diga-detail-nutrition": LocalJSX.MioViewerDigaDetailNutrition & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailNutritionElement>;
            "mio-viewer-diga-detail-observation": LocalJSX.MioViewerDigaDetailObservation & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailObservationElement>;
            "mio-viewer-diga-detail-questionaire": LocalJSX.MioViewerDigaDetailQuestionaire & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailQuestionaireElement>;
            "mio-viewer-diga-detail-vitalsign": LocalJSX.MioViewerDigaDetailVitalsign & JSXBase.HTMLAttributes<HTMLMioViewerDigaDetailVitalsignElement>;
            "mio-viewer-diga-filter-menu": LocalJSX.MioViewerDigaFilterMenu & JSXBase.HTMLAttributes<HTMLMioViewerDigaFilterMenuElement>;
            "mio-viewer-diga-header": LocalJSX.MioViewerDigaHeader & JSXBase.HTMLAttributes<HTMLMioViewerDigaHeaderElement>;
            "mio-viewer-diga-list-sort-indicator": LocalJSX.MioViewerDigaListSortIndicator & JSXBase.HTMLAttributes<HTMLMioViewerDigaListSortIndicatorElement>;
            "mio-viewer-diga-notice": LocalJSX.MioViewerDigaNotice & JSXBase.HTMLAttributes<HTMLMioViewerDigaNoticeElement>;
            "mio-viewer-diga-record-overview": LocalJSX.MioViewerDigaRecordOverview & JSXBase.HTMLAttributes<HTMLMioViewerDigaRecordOverviewElement>;
            "mio-viewer-diga-record-overview-section": LocalJSX.MioViewerDigaRecordOverviewSection & JSXBase.HTMLAttributes<HTMLMioViewerDigaRecordOverviewSectionElement>;
            "mio-viewer-diga-subheader": LocalJSX.MioViewerDigaSubheader & JSXBase.HTMLAttributes<HTMLMioViewerDigaSubheaderElement>;
        }
    }
}
